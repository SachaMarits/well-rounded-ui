{"version":3,"file":"index-ce627a7d.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../src/types/Colors.ts","../../src/components/layout/Badge.tsx","../../src/components/layout/Card.tsx","../../src/components/layout/CardHeader.tsx","../../src/components/layout/CardFooter.tsx","../../src/components/layout/Col.tsx","../../src/components/layout/Row.tsx","../../src/components/layout/Spinner.tsx","../../src/components/layout/EmptyLinePlaceholder.tsx","../../src/components/layout/Progress.tsx","../../src/components/layout/TabPane.tsx","../../src/components/layout/Tabs.tsx","../../src/components/layout/TreeViewItem.tsx","../../src/components/inputs/Button.tsx","../../src/components/inputs/Input.tsx","../../src/components/inputs/MultiSelect.tsx","../../src/components/inputs/Pagination.tsx","../../src/components/inputs/Select.tsx","../../src/components/layout/NoDataPlaceholder.tsx","../../src/components/inputs/Table.tsx","../../src/components/inputs/Calendar.tsx","../../src/components/inputs/Dropdown.tsx","../../src/components/inputs/Tooltip.tsx","../../src/components/inputs/FileUpload.tsx","../../src/components/inputs/ImageUpload.tsx","../../src/components/layout/TextEditor/TextEditorContext.jsx","../../src/components/layout/TextEditor/ToolbarText.tsx","../../src/components/layout/TextEditor/ToolbarIconGroup.tsx","../../src/components/layout/TextEditor/ToolbarColor.tsx","../../src/components/layout/TextEditor/ToolbarImage.tsx","../../src/components/layout/TextEditor/ToolbarLayout.tsx","../../src/components/layout/TextEditor/TextEditorToolbar.tsx","../../src/components/layout/TextEditor/TextEditor.tsx","../../src/components/layout/WellRoundedUI.tsx","../../src/components/layout/ModalBody.tsx","../../src/components/layout/AlertMessage.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","export enum StatusColor {\r\n  Primary = \"primary\",\r\n  Success = \"success\",\r\n  Warning = \"warning\",\r\n  Danger = \"danger\"\r\n}\r\n\r\nexport enum ThemeColor {\r\n  Primary = \"primary\",\r\n  Secondary = \"secondary\",\r\n  Success = \"success\",\r\n  Warning = \"warning\",\r\n  Danger = \"danger\",\r\n  Default = \"default\"\r\n}\r\n","import React from \"react\";\r\nimport { ThemeColor } from \"../../types/Colors\";\r\n\r\ninterface BadgeProps {\r\n  className?: string;\r\n  /**\r\n   * Badge's content, mostly used for text\r\n   */\r\n  children: React.ReactNode;\r\n  color?: ThemeColor;\r\n}\r\n\r\nexport default function Badge({ className = \"\", children, color = ThemeColor.Primary }: BadgeProps) {\r\n  return <div className={`badge badge-${color} ${className || \"\"}`}>{children}</div>;\r\n}\r\n","import React from \"react\";\r\n\r\ninterface CardProps {\r\n  className?: string;\r\n  /**\r\n   * Card's content, mostly used for <CardHeader /> and <CardFooter />\r\n   */\r\n  children: React.ReactNode;\r\n  onClick?: () => void;\r\n}\r\n\r\nexport default function Card({ className = \"\", children, onClick = () => {} }: CardProps) {\r\n  return (\r\n    <div className={`card ${className}`} onClick={onClick}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\ninterface CardHeaderProps {\r\n  /**\r\n   * CardHeader's content, mostly used for titles\r\n   */\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport default function CardHeader({ children }: CardHeaderProps) {\r\n  return <div className=\"card-header\">{children}</div>;\r\n}\r\n\r\nexport { CardHeader as ModalHeader };\r\n","import React from \"react\";\r\n\r\ninterface CardFooterProps {\r\n  /**\r\n   * CardFooter's content, mostly used for buttons and actions\r\n   */\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport default function CardFooter({ children }: CardFooterProps) {\r\n  return <div className=\"card-footer d-flex flex-row-reverse\">{children}</div>;\r\n}\r\n\r\nexport { CardFooter as ModalFooter };\r\n","import React from \"react\";\r\n\r\ninterface ColProps {\r\n  className?: string;\r\n  children?: React.ReactNode;\r\n  xl: number;\r\n  lg: number;\r\n  md: number;\r\n  sm: number;\r\n  xs: number;\r\n}\r\n\r\nexport default function Col({ className, children, xl = 3, lg = 4, md = 6, sm = 12, xs = 12 }: ColProps) {\r\n  return (\r\n    <div\r\n      className={`${className}\r\n      ${xl ? ` col-xl-${xl}` : \"\"}\r\n      ${lg ? ` col-lg-${lg}` : \"\"}\r\n      ${md ? ` col-md-${md}` : \"\"}\r\n      ${sm ? ` col-sm-${sm}` : \"\"}\r\n      ${xs ? ` col-xs-${xs}` : \"\"}`}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\ninterface RowProps {\r\n  className?: string;\r\n  /**\r\n   * Row's content, mostly used for <Col />\r\n   */\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport default function Row({ className = \"\", children }: RowProps) {\r\n  return <div className={`row ${className}`}>{children}</div>;\r\n}\r\n","import React from \"react\";\r\n\r\ninterface SpinnerProps {\r\n  className?: string;\r\n  color?: \"primary\" | \"success\" | \"warning\" | \"danger\" | \"black\" | \"white\";\r\n  size: \"lg\" | \"md\" | \"sm\" | \"xs\";\r\n}\r\n\r\nexport default function Spinner({ className = \"\", color = \"primary\", size = \"sm\" }: SpinnerProps) {\r\n  const sizeInPx = () => {\r\n    switch (size) {\r\n      case \"lg\":\r\n        return 64;\r\n      case \"md\":\r\n        return 48;\r\n      case \"sm\":\r\n        return 32;\r\n      case \"xs\":\r\n        return 16;\r\n      default:\r\n        return 32;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <svg\r\n      className={`spinner ${className}`}\r\n      style={{ height: sizeInPx(), width: sizeInPx() }}\r\n      viewBox=\"0 0 66 66\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <circle\r\n        className={`path path-${color}`}\r\n        fill=\"none\"\r\n        strokeWidth=\"6\"\r\n        strokeLinecap=\"round\"\r\n        cx=\"33\"\r\n        cy=\"33\"\r\n        r=\"30\"\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\ninterface EmptyLinePlaceholderProps {\r\n  style?: React.CSSProperties;\r\n  onClick: () => void;\r\n  text: string;\r\n  action?: string;\r\n}\r\n\r\nexport default function EmptyLinePlaceholder({ style = {}, onClick, text, action = \"\" }: EmptyLinePlaceholderProps) {\r\n  return (\r\n    <div className=\"empty-line-placeholder pointer mt-3\" style={style} onClick={onClick}>\r\n      {text} {action === \"add\" && <i className=\"mdi mdi-plus\" />}\r\n    </div>\r\n  );\r\n}\r\n\r\nEmptyLinePlaceholder.propTypes = {\r\n  style: PropTypes.objectOf(PropTypes.number),\r\n  onClick: PropTypes.func.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n  action: PropTypes.string\r\n};\r\n\r\nEmptyLinePlaceholder.defaultProps = {\r\n  style: {},\r\n  action: \"\"\r\n};\r\n","import React from \"react\";\r\n\r\ninterface ProgressProps {\r\n  className?: string;\r\n  value: number;\r\n  min?: number;\r\n  max?: number;\r\n  color?: \"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"default\" | \"orange\";\r\n}\r\n\r\nexport default function Progress({ className = \"\", value, min = 0, max = 100, color = \"primary\" }: ProgressProps) {\r\n  return (\r\n    <div className={`${className || \"\"} progress`}>\r\n      <div className={`progress-bar bg-${color}`} style={{ width: `${(value / (min + max)) * 100}%` }} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\ninterface TabPaneProps {\r\n  name?: string;\r\n  children: React.ReactNode;\r\n  /**\r\n   * Disabled the tab click\r\n   */\r\n  disabled?: boolean;\r\n}\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nexport default function TabPane({ name = \"\", children, disabled = false }: TabPaneProps) {\r\n  return <div className=\"tab-pane\">{children}</div>;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\ninterface Tab {\r\n  name: string;\r\n  disabled?: boolean;\r\n}\r\n\r\ninterface TabsProps {\r\n  className?: string;\r\n  /**\r\n   * Should be a list of <TabPane />\r\n   */\r\n  children: typeof React.Children;\r\n}\r\n\r\nconst Tabs: React.FC<TabsProps> = ({ className = \"\", children }) => {\r\n  const [tabHeader, setTabHeader] = useState<Tab[]>([]);\r\n  const [childContent, setChildContent] = useState<{ [key: string]: React.ReactElement }>({});\r\n  const [active, setActive] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    const headers: Tab[] = [];\r\n    const childCnt: { [key: string]: React.ReactElement } = {};\r\n\r\n    React.Children.forEach(children, (element) => {\r\n      if (!React.isValidElement(element)) return;\r\n\r\n      const { name, disabled } = element.props as Tab;\r\n      headers.push({ name, disabled: disabled || false });\r\n      // @ts-ignore\r\n      childCnt[name] = element.props.children;\r\n    });\r\n\r\n    setTabHeader(headers);\r\n\r\n    if (active === \"\") {\r\n      setActive(headers[0].name);\r\n    }\r\n\r\n    setChildContent({ ...childCnt });\r\n  }, [children]);\r\n\r\n  const changeTab = (name: string) => setActive(name);\r\n\r\n  return (\r\n    <div className={`tabs ${className}`}>\r\n      <ul className=\"tab-header\">\r\n        {tabHeader.map(({ name, disabled }) => (\r\n          <li\r\n            onClick={() => changeTab(name)}\r\n            key={name}\r\n            className={`${name === active ? \"active\" : \"\"} ${disabled && \"disabled\"}`}\r\n          >\r\n            {name}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {Object.keys(childContent).map(\r\n          (key) =>\r\n            key === active && (\r\n              <div className=\"tab-child\" key={key}>\r\n                {childContent[key]}\r\n              </div>\r\n            )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tabs;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\ninterface TreeViewItemProps {\r\n  setSelection: (id: number | null) => void;\r\n  selection?: number | null;\r\n  id: number;\r\n  name: string;\r\n  text: string | React.ReactNode;\r\n  level: number;\r\n  endOfTree?: boolean;\r\n  editItem: (id: number) => void;\r\n  deleteItem: (id: number) => void;\r\n}\r\n\r\nexport default function TreeViewItem({\r\n  setSelection,\r\n  selection = null,\r\n  id,\r\n  name,\r\n  text,\r\n  level,\r\n  endOfTree = false,\r\n  editItem,\r\n  deleteItem\r\n}: TreeViewItemProps) {\r\n  const fonSizes = [\"1.15rem\", \"1.07rem\", \"1rem\"];\r\n  const backgroundColors = [\"#ffffff\", \"#f9f9f9\", \"#f4f4f4\"];\r\n\r\n  return (\r\n    <div\r\n      className=\"card-compact d-flex align-items-center justify-content-between pointer\"\r\n      onClick={() => setSelection(selection === id ? null : id)}\r\n      style={{ marginLeft: `${level * 20}px`, background: backgroundColors[level] }}\r\n    >\r\n      <div className=\"d-flex\">\r\n        {!endOfTree && (\r\n          <i className={`mdi mdi-chevron-${selection === id ? \"down\" : \"right\"} mr-3 text-primary text-lg`} />\r\n        )}\r\n        <h3 style={{ fontSize: fonSizes[level] }}>{name}</h3>\r\n        <p className=\"ml-3\">{text}</p>\r\n      </div>\r\n      <div className=\"d-flex align-items-center\">\r\n        <i\r\n          className=\"mdi mdi-pencil text-warning pointer text-lg px-2\"\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            editItem(id);\r\n          }}\r\n        />\r\n        <i\r\n          className=\"mdi mdi-delete text-danger pointer text-lg px-2\"\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            deleteItem(id);\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Spinner } from \"../layout\";\r\n\r\ninterface ButtonProps {\r\n  className?: string;\r\n  text?: string;\r\n  color: string;\r\n  onClick?: () => void;\r\n  submit?: boolean;\r\n  action?: string;\r\n  animate?: boolean;\r\n  isSubmitting?: boolean;\r\n  disabled?: boolean;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nexport default function Button({\r\n  className = \"\",\r\n  text = \"\",\r\n  submit = false,\r\n  action = \"\",\r\n  animate = false,\r\n  isSubmitting = false,\r\n  disabled = false,\r\n  onClick = () => {},\r\n  children = null,\r\n  color\r\n}: ButtonProps) {\r\n  const styles = () => {\r\n    let classNames = `${className} btn${animate ? \" fadeIn\" : \"\"} ${isSubmitting ? \" btn-disabled\" : \"\"}`;\r\n    classNames += ` btn-${color}`;\r\n    return classNames;\r\n  };\r\n\r\n  const icon = () => {\r\n    switch (action) {\r\n      case \"add\":\r\n        return \"mdi mdi-plus-thick\";\r\n      case \"delete\":\r\n        return \"mdi mdi-delete\";\r\n      case \"edit\":\r\n        return \"mdi mdi-pencil\";\r\n      case \"upload\":\r\n        return \"mdi mdi-upload\";\r\n      case \"download\":\r\n        return \"mdi mdi-download\";\r\n      case \"send\":\r\n        return \"mdi mdi-send\";\r\n      case \"navigate\":\r\n        return \"mdi mdi-chevron-right\";\r\n      case \"cart\":\r\n      case \"shop\":\r\n        return \"mdi mdi-cart\";\r\n      case \"pay\":\r\n        return \"mdi mdi-currency-eur\";\r\n      default:\r\n        return action;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button\r\n      type={submit ? \"submit\" : \"button\"}\r\n      className={styles()}\r\n      onClick={() => onClick()}\r\n      disabled={isSubmitting || disabled}\r\n    >\r\n      {isSubmitting ? (\r\n        <Spinner size=\"xs\" />\r\n      ) : (\r\n        children || (\r\n          <>\r\n            {text}\r\n            {action && <i className={`${text ? \"ml-2\" : \"\"} ${icon()}`} />}\r\n          </>\r\n        )\r\n      )}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\ninterface Error {\r\n  type: string;\r\n}\r\n\r\ninterface InputProps {\r\n  className?: string;\r\n  name: string;\r\n  label?: string;\r\n  type?: string;\r\n  placeholder?: string;\r\n  register?: any;\r\n  errors?: Error;\r\n  required?: boolean;\r\n  minLength?: number | undefined;\r\n  maxLength?: number | undefined;\r\n}\r\n\r\nexport default function Input({\r\n  className = \"\",\r\n  label = \"\",\r\n  placeholder = \"\",\r\n  register = () => {},\r\n  type = \"text\",\r\n  errors = undefined,\r\n  required = false,\r\n  minLength = undefined,\r\n  maxLength = undefined,\r\n  name,\r\n  ...props\r\n}: InputProps) {\r\n  const input = (\r\n    <input\r\n      id={name}\r\n      name={name}\r\n      type={type}\r\n      className={`form-control${errors ? \" error-input\" : \"\"}${!label ? ` ${className}` : \"\"}`}\r\n      placeholder={placeholder}\r\n      {...(register && {\r\n        ...register(name, {\r\n          required: { value: required },\r\n          minLength: { value: minLength },\r\n          maxLength: { value: maxLength }\r\n        })\r\n      })}\r\n      {...props}\r\n    />\r\n  );\r\n  const textarea = (\r\n    <textarea\r\n      id={name}\r\n      name={name}\r\n      type={type}\r\n      className={`form-control${errors ? \" error-input\" : \"\"}${!label ? ` ${className}` : \"\"}`}\r\n      placeholder={placeholder}\r\n      {...(register && {\r\n        ...register(name, {\r\n          required: { value: required },\r\n          minLength: { value: minLength },\r\n          maxLength: { value: maxLength }\r\n        })\r\n      })}\r\n      {...props}\r\n    />\r\n  );\r\n\r\n  const field = type === \"textarea\" ? textarea : input;\r\n\r\n  return (\r\n    <>\r\n      {label ? (\r\n        <label htmlFor={name} className={`${className}${type === \"checkbox\" ? \" checkbox\" : \"\"} d-block mb-3`}>\r\n          {label}\r\n          {field}\r\n        </label>\r\n      ) : (\r\n        field\r\n      )}\r\n\r\n      {errors && (\r\n        <div className=\"mt-1 mb-1 text-danger\">\r\n          {errors.type === \"required\" && `${label || placeholder} is required.`}\r\n          {errors.type === \"maxLength\" && `${label || placeholder} must have at least ${maxLength} characters`}\r\n          {errors.type === \"minLength\" && `${label || placeholder} must be at least ${minLength} caracters long`}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Option } from \"src/types/Options\";\r\n\r\ninterface MultiSelectProps {\r\n  className?: string;\r\n  name: string;\r\n  label: string;\r\n  options?: Option[];\r\n  onChange: (ids: number[]) => void;\r\n}\r\n\r\nexport default function MultiSelect({ className = \"\", name, label, options = [], onChange }: MultiSelectProps) {\r\n  const [isListOpen, openList] = useState<boolean>(false);\r\n  const [selection, setSelection] = useState<number[]>([]);\r\n\r\n  const resizeObserver = new ResizeObserver((entries) => {\r\n    const rect = entries[0].contentRect;\r\n    const { height } = rect;\r\n    const select = document.getElementById(name);\r\n    if (select) select.style.top = `${height + 6}px`;\r\n  });\r\n\r\n  useEffect(() => {\r\n    const nameSelection = document.querySelector(`#${name}-selection`);\r\n    if (nameSelection) resizeObserver.observe(nameSelection);\r\n  }, []);\r\n\r\n  const applyChanges = (changes: number[]) => {\r\n    setSelection(changes);\r\n    onChange(changes);\r\n  };\r\n\r\n  const addItem = (id: number) => applyChanges([...selection, id]);\r\n  const deleteItem = (id: number) => applyChanges(selection.filter((s) => s !== id));\r\n\r\n  window.addEventListener(\r\n    \"click\",\r\n    (e) => {\r\n      const { target } = e;\r\n      if ((target as HTMLElement)?.classList.contains(\"multi-select\")) return;\r\n      if ((target as HTMLElement)?.tagName !== \"LI\") openList(false);\r\n    },\r\n    false\r\n  );\r\n\r\n  return (\r\n    <div className={`input-with-label mb-3 ${className}`}>\r\n      <label htmlFor={name}>\r\n        {label}\r\n        <div className=\"multi-select-container\">\r\n          <div\r\n            id={`${name}-selection`}\r\n            className=\"multi-select form-control\"\r\n            role=\"alertdialog\"\r\n            onClick={() => openList(true)}\r\n          >\r\n            {selection.map((id) => (\r\n              <div key={id} className=\"multi-select-item\">\r\n                <p>{options.find((option) => option.id === id)?.text}</p>\r\n                <i className=\"mdi mdi-close\" role=\"navigation\" onClick={() => deleteItem(id)} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <ul id={name} className={`select ${isListOpen ? \"active\" : \"\"} lg`}>\r\n            {options.map((option) => {\r\n              if (selection.findIndex((id) => id === option.id) === -1)\r\n                return (\r\n                  <li key={option.id} onClick={() => addItem(option.id)}>\r\n                    {option.text}\r\n                  </li>\r\n                );\r\n              return null;\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nimport React from \"react\";\r\n\r\ninterface PaginationProps {\r\n  itemsPerPage: number;\r\n  totalItems: number;\r\n  activePage: number;\r\n  onChange: (newPage: number) => void;\r\n}\r\n\r\nexport default function Pagination({ itemsPerPage, totalItems, activePage, onChange }: PaginationProps) {\r\n  const numberOfPages = Math.ceil(totalItems / itemsPerPage);\r\n\r\n  return (\r\n    <ul className=\"page\">\r\n      {activePage > 1 && (\r\n        <li className=\"page__btn\" onClick={() => onChange(activePage - 1)}>\r\n          <i className=\"mdi mdi-chevron-left\" />\r\n        </li>\r\n      )}\r\n      {Array(3)\r\n        .fill(1)\r\n        .map((_, index) => {\r\n          let i = activePage > 1 ? index - 1 : index;\r\n          i = activePage === numberOfPages ? i - 1 : i;\r\n          return (\r\n            <li\r\n              key={activePage + i}\r\n              className={`page__numbers ${activePage === activePage + i ? \"active\" : \"\"}`}\r\n              onClick={() => onChange(activePage + i)}\r\n            >\r\n              {activePage + i}\r\n            </li>\r\n          );\r\n        })}\r\n      {activePage < numberOfPages && (\r\n        <li className=\"page__btn\" onClick={() => onChange(activePage + 1)}>\r\n          <i className=\"mdi mdi-chevron-right\" />\r\n        </li>\r\n      )}\r\n    </ul>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\ninterface SelectProps {\r\n  className?: string;\r\n  name: string;\r\n  label?: string | null;\r\n  register?: any;\r\n  required?: boolean;\r\n  children?: React.ReactNode;\r\n  defaultOption?: string;\r\n  defaultValue?: string;\r\n}\r\n\r\nexport default function Select({\r\n  className = \"\",\r\n  label = null,\r\n  register = () => {},\r\n  required = false,\r\n  defaultOption = \"Select...\",\r\n  defaultValue = \"-1\",\r\n  name,\r\n  children,\r\n  ...props\r\n}: SelectProps) {\r\n  const returnSelectInput = () => (\r\n    <select\r\n      id={name}\r\n      name={name}\r\n      className=\"form-control\"\r\n      defaultValue={defaultValue}\r\n      {...(register && {\r\n        ...register(name, { required })\r\n      })}\r\n      {...props}\r\n    >\r\n      <option value=\"-1\" disabled>\r\n        {defaultOption}\r\n      </option>\r\n      {children}\r\n    </select>\r\n  );\r\n\r\n  return label ? (\r\n    <label htmlFor={name} className={`${className} d-block mb-3`}>\r\n      {label}\r\n      {returnSelectInput()}\r\n    </label>\r\n  ) : (\r\n    returnSelectInput()\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\ninterface NoDataPlaceholderProps {\r\n  /**\r\n   * Mdi icon's name\r\n   */\r\n  icon?: string;\r\n  text: string;\r\n  /**\r\n   * Button to add a new entity\r\n   */\r\n  button?: React.ReactNode;\r\n}\r\n\r\nexport default function NoDataPlaceholder({ icon = \"\", text, button = null }: NoDataPlaceholderProps) {\r\n  return (\r\n    <div className=\"flex-center flex-column h-200 p-3\">\r\n      {icon && <i className={`mdi mdi-${icon} text-xxl text-secondary mb-2`} />}\r\n      {text && <p className=\"text-center text-secondary mb-3\">{text}</p>}\r\n      {button}\r\n    </div>\r\n  );\r\n}\r\n\r\nNoDataPlaceholder.propTypes = {\r\n  icon: PropTypes.string,\r\n  text: PropTypes.string.isRequired,\r\n  button: PropTypes.node\r\n};\r\n\r\nNoDataPlaceholder.defaultProps = {\r\n  icon: \"\",\r\n  button: null\r\n};\r\n","import React from \"react\";\r\nimport NoDataPlaceholder from \"../layout/NoDataPlaceholder\";\r\n\r\ninterface TableProps {\r\n  keyColumn: string;\r\n  columns: string[];\r\n  data: any;\r\n  layout: any;\r\n  actions: any;\r\n}\r\n\r\nexport default function Table({ keyColumn, columns, data, layout, actions }: TableProps) {\r\n  if (data.length === 0) return <NoDataPlaceholder icon=\"table-off\" text=\"Nothing to show !\" />;\r\n\r\n  const keys = Object.keys(data[0]);\r\n\r\n  return (\r\n    <table className=\"table\">\r\n      <thead>\r\n        <tr className=\"columns\">\r\n          {columns.map((column: string) => (\r\n            <th key={column}>{column}</th>\r\n          ))}\r\n          {actions.length > 0 && <th>{actions.length === 1 ? \"Action\" : \"Actions\"}</th>}\r\n        </tr>\r\n      </thead>\r\n      <tbody className=\"rows\">\r\n        {data.map((row: any) => (\r\n          <tr className=\"mt-3 p-2\" key={row[keyColumn]}>\r\n            {keys.map(\r\n              (item, index) =>\r\n                layout[index].type !== \"hidden\" && (\r\n                  <td\r\n                    key={item}\r\n                    className={layout[index].type === \"image\" ? \"d-flex align-items-center justify-content-center\" : \"\"}\r\n                  >\r\n                    {layout[index].type === \"image\" && (\r\n                      <img className=\"rounded-circle square36\" src={`/${row[item]}.jpg`} />\r\n                    )}\r\n                    {layout[index].type === \"text\" && <p>{row[item]}</p>}\r\n                    {layout[index].type === \"boolean\" && (\r\n                      <i\r\n                        className={`text-xl ${row[item] ? \"mdi mdi-check text-success\" : \"mdi mdi-close text-danger\"}`}\r\n                      />\r\n                    )}\r\n                    {layout[index].type === \"raw\" && row[item]}\r\n                  </td>\r\n                )\r\n            )}\r\n            <td>\r\n              {actions.map((item: any) => (\r\n                <div className=\"actions\" key={item.action}>\r\n                  {item.action === \"edit\" && (\r\n                    <p className=\"text-primary px-2 pointer\" onClick={() => item.onClick(row[keyColumn])}>\r\n                      <i className=\"mdi mdi-pencil\" /> {!item.iconOnly && \"Edit\"}\r\n                    </p>\r\n                  )}\r\n                  {item.action === \"delete\" && (\r\n                    <p className=\"text-danger px-2 pointer\" onClick={() => item.onClick(row[keyColumn])}>\r\n                      <i className=\"mdi mdi-delete\" /> {!item.iconOnly && \"Delete\"}\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\ninterface CalendarData {\r\n  id: number;\r\n  text: string;\r\n  date: Date;\r\n}\r\n\r\ninterface CalendarProps {\r\n  year?: number;\r\n  month?: number;\r\n  showWeekends: boolean;\r\n  onDayClick: (d: Date) => void;\r\n  onDataClick: (cd: CalendarData) => void;\r\n  data: CalendarData[];\r\n}\r\n\r\nexport default function Calendar({\r\n  year = new Date().getFullYear(),\r\n  month = new Date().getMonth(),\r\n  showWeekends,\r\n  onDayClick,\r\n  onDataClick,\r\n  data\r\n}: CalendarProps) {\r\n  const responsiveWeekDays = (d: string) => {\r\n    if (window.innerWidth < 400) return d.substring(0, 1);\r\n    if (window.innerWidth < 700) return d.substring(0, 3) + \".\";\r\n    return d;\r\n  };\r\n\r\n  const daysInWeek = showWeekends ? 7 : 5;\r\n  const weekDays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\r\n    .map(responsiveWeekDays)\r\n    .slice(0, daysInWeek);\r\n\r\n  const [currentMonth, setCurrentMonth] = useState(month);\r\n  const [currentYear, setCurrentYear] = useState(year);\r\n\r\n  const getMonthName = () => {\r\n    const date = new Date();\r\n    date.setMonth(currentMonth);\r\n\r\n    return date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  };\r\n\r\n  const calendar = () => {\r\n    const firstDayOfMonth = new Date(currentYear, currentMonth, 1);\r\n    const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);\r\n    const daysInMonth = lastDayOfMonth.getDate();\r\n    const startDayOfWeek = firstDayOfMonth.getDay();\r\n    const endDayOfWeek = lastDayOfMonth.getDay();\r\n\r\n    const daysInPreviousMonth = startDayOfWeek === 0 ? 6 : startDayOfWeek - 1;\r\n    const daysInNextMonth = endDayOfWeek === 0 ? 0 : 7 - endDayOfWeek;\r\n\r\n    const totalDays = daysInPreviousMonth + daysInMonth + daysInNextMonth;\r\n    const monthTable = [];\r\n    let currentDay = 1;\r\n\r\n    for (let row = 0; row < Math.ceil(totalDays / 7); row++) {\r\n      const week = [];\r\n      for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {\r\n        if ((row === 0 && dayOfWeek < daysInPreviousMonth) || currentDay > daysInMonth) {\r\n          week.push(\"\");\r\n        } else {\r\n          week.push(currentDay++);\r\n        }\r\n      }\r\n      monthTable.push(week);\r\n    }\r\n\r\n    return monthTable;\r\n  };\r\n\r\n  const handleMonthChange = (increment: number) => {\r\n    const newDate = new Date(currentYear, currentMonth + increment, 1);\r\n    setCurrentMonth(newDate.getMonth());\r\n    setCurrentYear(newDate.getFullYear());\r\n  };\r\n\r\n  const dateObject = (day: number) => new Date(currentYear, currentMonth, day);\r\n  const sameDate = (d1: Date, d2: Date) => d1.toDateString() === d2.toDateString();\r\n\r\n  const dayClassNames = (day: number) => {\r\n    let className = \"day\";\r\n    if (!day) className += \" disabled\";\r\n    if (sameDate(new Date(), dateObject(day))) className += \" active\";\r\n    return className;\r\n  };\r\n\r\n  return (\r\n    <div className=\"calendar-wrapper\">\r\n      <div className=\"calendar-header\">\r\n        <i className=\"mdi mdi-chevron-left pointer\" onClick={() => handleMonthChange(-1)} />\r\n        <h2>\r\n          {getMonthName()} {currentYear}\r\n        </h2>\r\n        <i className=\"mdi mdi-chevron-right pointer\" onClick={() => handleMonthChange(1)} />\r\n      </div>\r\n\r\n      <div className=\"calendar\">\r\n        <div className=\"day-names\">\r\n          {weekDays.map((day) => (\r\n            <div key={day}>{day}</div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"day-numbers\">\r\n          {calendar().map((week, i) => (\r\n            <div className=\"week\" key={i}>\r\n              {week.slice(0, daysInWeek).map((day, i) => (\r\n                <div key={+day + i} className={dayClassNames(+day)} onClick={() => onDayClick(dateObject(+day))}>\r\n                  <p className=\"day-number\">{day}</p>\r\n                  {data\r\n                    .filter((d) => sameDate(d.date, dateObject(+day)))\r\n                    .map((d) => (\r\n                      <div\r\n                        key={+day + d.id + d.text}\r\n                        className=\"day-data pointer\"\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                          onDataClick(d);\r\n                        }}\r\n                      >\r\n                        {d.text}\r\n                      </div>\r\n                    ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Option } from \"src/types/Options\";\r\n\r\ninterface DropdownProps {\r\n  toggle: React.ReactNode;\r\n  options: Option[];\r\n  onClick: (id: number) => void;\r\n  openOnHover: boolean;\r\n  closeOnLeave: boolean;\r\n  width: number;\r\n}\r\n\r\nexport default function Dropdown({ toggle, options, onClick, openOnHover, closeOnLeave, width }: DropdownProps) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  let hoverTimeout: number | undefined = undefined;\r\n\r\n  const handleMouseOver = () => {\r\n    clearTimeout(hoverTimeout);\r\n    if (openOnHover) setIsOpen(true);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    if (closeOnLeave) hoverTimeout = setTimeout(() => setIsOpen(false), 300);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dropdown\" onMouseOver={handleMouseOver} onMouseLeave={handleMouseLeave}>\r\n      <div onClick={() => setIsOpen(!isOpen)}>{toggle}</div>\r\n      {isOpen && (\r\n        <ul className=\"options\" style={{ width }}>\r\n          {options.map(({ id, text }) => (\r\n            <li\r\n              key={id}\r\n              className=\"pointer\"\r\n              onClick={() => {\r\n                onClick(id);\r\n                setIsOpen(false);\r\n              }}\r\n            >\r\n              {text}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nDropdown.propTypes = {\r\n  toggle: PropTypes.node.isRequired,\r\n  options: PropTypes.arrayOf(PropTypes.object),\r\n  onClick: PropTypes.func.isRequired,\r\n  openOnHover: PropTypes.bool,\r\n  closeOnLeave: PropTypes.bool,\r\n  width: PropTypes.number\r\n};\r\n\r\nDropdown.defaultProps = {\r\n  options: [],\r\n  openOnHover: false,\r\n  closeOnLeave: false,\r\n  width: 160\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\ninterface TooltipProps {\r\n  toggle: React.ReactNode;\r\n  content: React.ReactNode;\r\n  openOnHover: boolean;\r\n  closeOnLeave: boolean;\r\n}\r\n\r\nexport default function Tooltip({ toggle, content, openOnHover = false, closeOnLeave = false }: TooltipProps) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  let hoverTimeout: number | undefined = undefined;\r\n\r\n  const handleMouseOver = () => {\r\n    clearTimeout(hoverTimeout);\r\n    if (openOnHover) setIsOpen(true);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    if (closeOnLeave) hoverTimeout = setTimeout(() => setIsOpen(false), 300);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dropdown\" onMouseOver={handleMouseOver} onMouseLeave={handleMouseLeave}>\r\n      <div onClick={() => setIsOpen(!isOpen)}>{toggle}</div>\r\n      {isOpen && <div className=\"tooltip\">{content}</div>}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Button from \"./Button\";\r\n\r\ninterface CustomFile extends File {\r\n  base64Data?: string;\r\n}\r\n\r\ninterface FileUploadProps {\r\n  className?: string;\r\n  allowedExtensions?: string[];\r\n  multiple: boolean;\r\n  dragAndDrop: boolean;\r\n  onChange: (f: any) => void;\r\n  showAllowedExtensions?: boolean;\r\n}\r\n\r\nexport default function FileUpload({\r\n  className = \"\",\r\n  allowedExtensions,\r\n  multiple,\r\n  dragAndDrop,\r\n  onChange,\r\n  showAllowedExtensions = false\r\n}: FileUploadProps) {\r\n  const [isDragOver, setIsDragOver] = useState<boolean>(false);\r\n  const [files, setFiles] = useState<File[]>([]);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setIsDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n    handleFiles(Array.from(e.dataTransfer.files));\r\n  };\r\n\r\n  const handleFiles = async (f: File[]) => {\r\n    const filteredFiles = f.filter((file) => {\r\n      const fileExtension = file.name.split(\".\").pop();\r\n      if (allowedExtensions) return fileExtension ? allowedExtensions.includes(fileExtension) : false;\r\n      return true;\r\n    });\r\n\r\n    const promises = filteredFiles.map((file: CustomFile) => {\r\n      return new Promise((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          const base64Data = e?.target?.result;\r\n          if (typeof base64Data === \"string\") file.base64Data = base64Data;\r\n          resolve(file);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n    });\r\n\r\n    const filesWithBase64: any = await Promise.all(promises);\r\n    setFiles(multiple ? [...files, ...filesWithBase64] : [filesWithBase64]);\r\n  };\r\n\r\n  const displayAllowedExtensions = allowedExtensions && showAllowedExtensions && `(.${allowedExtensions.join(\", .\")})`;\r\n\r\n  useEffect(() => {\r\n    if (onChange) onChange(files);\r\n  }, [files]);\r\n\r\n  return (\r\n    <div\r\n      className={`file-upload ${className}`}\r\n      onDragEnter={dragAndDrop ? handleDragEnter : undefined}\r\n      onDragOver={dragAndDrop ? handleDragEnter : undefined}\r\n      onDragLeave={dragAndDrop ? handleDragLeave : undefined}\r\n      onDrop={dragAndDrop ? handleDrop : undefined}\r\n    >\r\n      {dragAndDrop && (\r\n        <div className={`empty-line-placeholder${isDragOver ? \"-success\" : \"\"}`}>\r\n          <p className=\"p-3\">\r\n            <i className=\"mdi mdi-upload text-xl\" /> Drag and drop or{\" \"}\r\n            <u className=\"pointer\" onClick={() => fileInputRef?.current?.click()}>\r\n              choose {multiple ? \"files\" : \"a file\"}\r\n            </u>{\" \"}\r\n            to upload {displayAllowedExtensions}\r\n          </p>\r\n        </div>\r\n      )}\r\n      <input\r\n        type=\"file\"\r\n        ref={fileInputRef}\r\n        onChange={(e) => e.target.files && handleFiles(Array.from(e.target.files))}\r\n        multiple={multiple}\r\n        style={{ display: \"none\" }}\r\n        accept={allowedExtensions ? allowedExtensions.map((ext) => `.${ext}`).join(\",\") : \"*\"}\r\n      />\r\n\r\n      {!dragAndDrop && (\r\n        <Button\r\n          color=\"primary\"\r\n          action=\"upload\"\r\n          text={`Upload files ${displayAllowedExtensions}`}\r\n          onClick={() => (fileInputRef.current ? fileInputRef.current.click() : {})}\r\n        />\r\n      )}\r\n\r\n      <div className=\"flex-center flex-wrap\">\r\n        {files\r\n          .filter((f) => f.name)\r\n          .map(({ name }) => (\r\n            <div key={name} className=\"file-preview\">\r\n              {name}{\" \"}\r\n              <i\r\n                className=\"mdi mdi-close text-danger pointer ml-2 p-1\"\r\n                onClick={() => setFiles(files.filter((f) => f.name !== name))}\r\n              />\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\n\r\ninterface CustomFile extends File {\r\n  base64Data?: string;\r\n}\r\n\r\ninterface ImageUploadProps {\r\n  className?: string;\r\n  allowedExtensions?: string[];\r\n  multiple?: boolean;\r\n  dragAndDrop?: boolean;\r\n  onChange: (f: any) => void;\r\n  height?: number;\r\n  width?: number;\r\n  defaultValue?: CustomFile[];\r\n  showAllowedExtensions?: boolean;\r\n}\r\n\r\nexport default function ImageUpload({\r\n  className = \"\",\r\n  allowedExtensions = [\"jpg\", \"jpeg\", \"png\"],\r\n  multiple,\r\n  dragAndDrop,\r\n  onChange,\r\n  height = 150,\r\n  width = 150,\r\n  defaultValue = [],\r\n  showAllowedExtensions = false\r\n}: ImageUploadProps) {\r\n  const [isDragOver, setIsDragOver] = useState<boolean>(false);\r\n  const [files, setFiles] = useState<CustomFile[]>(defaultValue);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setIsDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n    handleFiles(Array.from(e.dataTransfer.files));\r\n  };\r\n\r\n  const handleFiles = async (f: CustomFile[]) => {\r\n    const filteredFiles = f.filter((file) => {\r\n      const fileExtension = file.name.split(\".\").pop();\r\n      return fileExtension ? allowedExtensions.includes(fileExtension) : null;\r\n    });\r\n\r\n    const promises = filteredFiles.map((file: CustomFile) => {\r\n      return new Promise((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          const base64Data = e?.target?.result;\r\n          if (typeof base64Data === \"string\") file.base64Data = base64Data;\r\n          resolve(file);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n    });\r\n\r\n    const filesWithBase64: any = await Promise.all(promises);\r\n    setFiles(multiple ? [...files, ...filesWithBase64] : [filesWithBase64]);\r\n  };\r\n\r\n  const displayAllowedExtensions = allowedExtensions && showAllowedExtensions && `(.${allowedExtensions.join(\", .\")})`;\r\n\r\n  useEffect(() => {\r\n    if (onChange) onChange(files);\r\n  }, [files]);\r\n\r\n  return (\r\n    <div className={`image-upload ${className}`}>\r\n      <div className=\"d-flex flex-wrap\">\r\n        {files.map(({ base64Data }, i) => (\r\n          <div key={i} className=\"position-relative\">\r\n            <div\r\n              className=\"mr-3 mb-3 image-uploaded\"\r\n              style={{\r\n                width,\r\n                height,\r\n                backgroundImage: `url(${base64Data})`,\r\n                backgroundSize: \"cover\"\r\n              }}\r\n            >\r\n              <i\r\n                className=\"mdi mdi-close pointer\"\r\n                onClick={() => setFiles(files.filter((_, fileIndex) => fileIndex !== i))}\r\n              />\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <div\r\n          className={`flex-center flex-column p-1 text-sm unselectable pointer mb-3 p-1 text-sm empty-line-placeholder${\r\n            isDragOver ? \"-success\" : \"\"\r\n          }`}\r\n          style={{ height, width }}\r\n          onDragEnter={dragAndDrop ? handleDragEnter : undefined}\r\n          onDragOver={dragAndDrop ? handleDragEnter : undefined}\r\n          onDragLeave={dragAndDrop ? handleDragLeave : undefined}\r\n          onDrop={dragAndDrop ? handleDrop : undefined}\r\n          onClick={() => (fileInputRef.current ? fileInputRef.current.click() : {})}\r\n        >\r\n          <i className=\"mdi mdi-upload text-xl\" />\r\n          <p className={!dragAndDrop ? \"mb-2\" : \"\"}>\r\n            <u>Upload image</u>\r\n          </p>\r\n          {dragAndDrop && <p className=\"text-secondary mb-2\">or drag & drop {displayAllowedExtensions}</p>}\r\n        </div>\r\n      </div>\r\n      <input\r\n        type=\"file\"\r\n        ref={fileInputRef}\r\n        onChange={(e) => e.target.files && handleFiles(Array.from(e.target.files))}\r\n        multiple={multiple}\r\n        style={{ display: \"none\" }}\r\n        accept={allowedExtensions.map((ext) => `.${ext}`).join(\",\")}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { createContext } from \"react\";\r\n\r\nexport const TextEditorContext = createContext();\r\n","import React, { useContext } from \"react\";\r\nimport { Dropdown } from \"../../inputs\";\r\nimport { TextEditorContext } from \"./TextEditorContext\";\r\n\r\ntype Setting = {\r\n  style: string;\r\n  icon: string;\r\n};\r\n\r\nconst settings: Setting[] = [\r\n  { style: \"bold\", icon: \"bold\" },\r\n  { style: \"italic\", icon: \"italic\" },\r\n  { style: \"underline\", icon: \"underline\" },\r\n  { style: \"justifyLeft\", icon: \"align-left\" },\r\n  { style: \"justifyCenter\", icon: \"align-center\" },\r\n  { style: \"justifyRight\", icon: \"align-right\" },\r\n];\r\n\r\ntype Option = {\r\n  id: number;\r\n  text: string;\r\n};\r\n\r\nconst fontSizeOptions: Option[] = [\r\n  { id: 1, text: \"Smaller\" },\r\n  { id: 2, text: \"Small\" },\r\n  { id: 3, text: \"Medium\" },\r\n  { id: 4, text: \"Large\" },\r\n  { id: 5, text: \"Larger\" },\r\n  { id: 6, text: \"Extra Large\" },\r\n];\r\n\r\nconst fontOptions = [\r\n  { id: \"Arial, sans-serif\", text: \"Arial\" },\r\n  { id: \"Times New Roman, serif\", text: \"Times New Roman\" },\r\n  { id: \"Verdana, sans-serif\", text: \"Verdana\" },\r\n  { id: \"Georgia, serif\", text: \"Georgia\" },\r\n  { id: \"Courier New, monospace\", text: \"Courier New\" },\r\n];\r\n\r\ntype ToolbarTextProps = {\r\n  handleStyle: (style: string, value?: string | undefined) => void;\r\n};\r\n\r\n\r\nexport default function ToolbarText({ handleStyle }: ToolbarTextProps) {\r\n  const { hideTitles, hideGroupNames } = useContext(TextEditorContext);\r\n\r\n  const title = (text: string) => capitalizeFirstLetter(text.replace(/-/g, \" \"));\r\n\r\n  const capitalizeFirstLetter = (text: string) =>\r\n    text.charAt(0).toUpperCase() + text.slice(1);\r\n\r\n  const overrideFontFaces = () => {\r\n    const fontElements = document.querySelectorAll('font');\r\n\r\n    fontElements.forEach((fontElement) => {\r\n      const fontFaceValue = fontElement.getAttribute('face');\r\n      if (fontFaceValue) fontElement.style.fontFamily = fontFaceValue;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"tool-group\">\r\n      <div className=\"tool-group-icons\">\r\n        {settings.map(({ icon, style }) => (\r\n          <button\r\n            key={icon}\r\n            className=\"btn btn-option\"\r\n            onClick={() => handleStyle(style)}\r\n            title={hideTitles ? \"\" : title(icon)}\r\n          >\r\n            <i className={`mdi mdi-format-${icon}`} />\r\n          </button>\r\n        ))}\r\n        <Dropdown\r\n          options={fontSizeOptions}\r\n          toggle={\r\n            <button\r\n              className=\"btn btn-option btn-collapse\"\r\n              title={hideTitles ? \"\" : \"Font size\"}\r\n            >\r\n              <i className={`mdi mdi-format-size`} />\r\n              <i className={`mdi mdi-chevron-down`} />\r\n            </button>\r\n          }\r\n          onClick={(id) => handleStyle(\"fontSize\", id)}\r\n          closeOnLeave\r\n        />\r\n        <Dropdown\r\n          options={fontOptions}\r\n          toggle={\r\n            <button\r\n              className=\"btn btn-option btn-collapse\"\r\n              title={hideTitles ? \"\" : \"Font\"}\r\n            >\r\n              <i className={`mdi mdi-format-font`} />\r\n              <i className={`mdi mdi-chevron-down`} />\r\n            </button>\r\n          }\r\n          onClick={(id) => {\r\n            handleStyle(\"fontName\", id);\r\n            overrideFontFaces();\r\n          }}\r\n          width={200}\r\n          closeOnLeave\r\n        />\r\n      </div>\r\n      {!hideGroupNames && <p className=\"tool-group-title\">Text</p>}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Tooltip } from \"../../inputs\";\r\nimport { TextEditorContext } from \"./TextEditorContext\";\r\n\r\ninterface ToolbarIconGroupProps {\r\n  icon: string;\r\n  color: string;\r\n  onChange: (color: string) => void;\r\n  title: string;\r\n}\r\n\r\nconst ToolbarIconGroup = ({ icon, color, onChange, title }: ToolbarIconGroupProps) => {\r\n  const { hideTitles } = useContext(TextEditorContext);\r\n\r\n  return (\r\n    <Tooltip\r\n      toggle={\r\n        <button\r\n          className=\"btn btn-option btn-collapse\"\r\n          title={hideTitles || !title ? \"\" : title}\r\n        >\r\n          <div className=\"icon-collapse\">\r\n            <i className={`mdi mdi-format-color-${icon}`} />\r\n            <i className={`mdi mdi-color-helper`} style={{ color }} />\r\n          </div>\r\n          <i className={`mdi mdi-chevron-down`} />\r\n        </button>\r\n      }\r\n      content={\r\n        <input\r\n          type=\"color\"\r\n          value={color}\r\n          onChange={(e) => onChange(e.target.value)}\r\n        />\r\n      }\r\n      closeOnLeave\r\n    />\r\n  );\r\n};\r\n\r\nexport default ToolbarIconGroup;\r\n","import React, { useContext, useState } from \"react\";\r\nimport ToolbarIconGroup from \"./ToolbarIconGroup\";\r\nimport { TextEditorContext } from \"./TextEditorContext\";\r\n\r\ninterface ToolbarColorProps {\r\n  handleStyle: (style: string, value: string | undefined) => void;\r\n}\r\n\r\nconst ToolbarColor = ({ handleStyle } : ToolbarColorProps) => {\r\n  const { hideTitles, hideGroupNames } = useContext(TextEditorContext);\r\n  const [fontColor, setFontColor] = useState(\"#ff0000\");\r\n  const [highlightColor, setHighlightColor] = useState(\"#ffff00\");\r\n  const [fillColor, setFillColor] = useState(\"#00ff00\");\r\n\r\n  return (\r\n    <div className=\"tool-group\">\r\n      <div className=\"tool-group-icons\">\r\n        <ToolbarIconGroup\r\n          icon=\"text\"\r\n          color={fontColor}\r\n          onChange={(v) => {\r\n            setFontColor(v);\r\n            handleStyle(\"foreColor\", v);\r\n          }}\r\n          title={hideTitles ? \"\" : \"Font color\"}\r\n        />\r\n        <ToolbarIconGroup\r\n          icon=\"highlight\"\r\n          color={highlightColor}\r\n          onChange={(v) => {\r\n            setHighlightColor(v);\r\n            handleStyle(\"hiliteColor\", v);\r\n          }}\r\n          title={hideTitles ? \"\" : \"Font highlight color\"}\r\n        />\r\n        <ToolbarIconGroup\r\n          icon=\"fill\"\r\n          color={fillColor}\r\n          onChange={(v) => {\r\n            setFillColor(v);\r\n            handleStyle(\"backColor\", v);\r\n          }}\r\n          title={hideTitles ? \"\" : \"Background color\"}\r\n        />\r\n      </div>\r\n      {!hideGroupNames && <p className=\"tool-group-title\">Color</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToolbarColor;\r\n","import React, { useRef, useEffect, useContext } from \"react\";\r\nimport { TextEditorContext } from \"./TextEditorContext\";\r\n\r\ninterface ToolbarImageProps {\r\n  text: HTMLDivElement;\r\n}\r\n\r\nconst ToolbarImage = ({ text }: ToolbarImageProps) => {\r\n  const { hideTitles, hideGroupNames } = useContext(TextEditorContext);\r\n  const imageInputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    document.querySelectorAll(\".selected-image-option\").forEach((button: any) => {\r\n      button.disabled = true;\r\n    });\r\n  }, []);\r\n\r\n  const handleAlignment = (float: string) => {\r\n    const selectedImage = document.querySelector(\".selected-image\") as HTMLImageElement;\r\n    if (selectedImage) selectedImage.style.float = float;\r\n  };\r\n\r\n  const handleInsertImage = () => imageInputRef.current?.click();\r\n\r\n  const handleImageUpload = (e: any) => {\r\n    const file = e.target.files?.[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = (event: ProgressEvent<FileReader>) => {\r\n        const imageUrl = event.target?.result as string;\r\n        document.execCommand(\"insertImage\", false, imageUrl);\r\n        // @ts-ignore\r\n        text.current?.querySelectorAll(\"img\").forEach((img: HTMLImageElement) => {\r\n          img.classList.add(\"resizable-image\");\r\n          img.addEventListener(\"mousedown\", (e: MouseEvent) => {\r\n            if (e.target === img) {\r\n              e.preventDefault();\r\n              const originalWidth = img.offsetWidth;\r\n              const originalHeight = img.offsetHeight;\r\n              const startX = e.clientX;\r\n              const startY = e.clientY;\r\n\r\n              document.addEventListener(\"mousemove\", resizeImage);\r\n              document.addEventListener(\"mouseup\", () => {\r\n                document.removeEventListener(\"mousemove\", resizeImage);\r\n              });\r\n\r\n              function resizeImage(e: MouseEvent) {\r\n                const newWidth = originalWidth + (e.clientX - startX);\r\n                const newHeight = originalHeight + (e.clientY - startY);\r\n                img.style.width = newWidth + \"px\";\r\n                img.style.height = newHeight + \"px\";\r\n              }\r\n            }\r\n          });\r\n        });\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"tool-group\">\r\n      <div className=\"tool-group-icons\">\r\n        <button className=\"btn btn-option\" onClick={handleInsertImage} title={hideTitles ? \"\" : \"Insert image\"}>\r\n          <i className={`mdi mdi-image-plus`} />\r\n        </button>\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          ref={imageInputRef}\r\n          style={{ display: \"none\" }}\r\n          onChange={handleImageUpload}\r\n        />\r\n        <button\r\n          className=\"btn btn-option selected-image-option\"\r\n          onClick={() => handleAlignment(\"left\")} title={hideTitles ? \"\" : \"Align left\"}\r\n        >\r\n          <i className=\"mdi mdi-align-horizontal-left\" />\r\n        </button>\r\n        <button\r\n          className=\"btn btn-option selected-image-option\"\r\n          onClick={() => handleAlignment(\"right\")} title={hideTitles ? \"\" : \"Align right\"}\r\n        >\r\n          <i className=\"mdi mdi-align-horizontal-right\" />\r\n        </button>\r\n        <button\r\n          className=\"btn btn-option selected-image-option\"\r\n          onClick={() => handleAlignment(\"none\")} title={hideTitles ? \"\" : \"Remove alignment\"}\r\n        >\r\n          <i className=\"mdi mdi-signature-image\" />\r\n        </button>\r\n      </div>\r\n      {!hideGroupNames && <p className=\"tool-group-title\">Image</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToolbarImage;","import React, { useContext } from \"react\";\r\nimport { Input, Tooltip } from \"../../inputs\";\r\nimport { TextEditorContext } from \"./TextEditorContext\";\r\n\r\ninterface ToolbarLayoutProps {\r\n  text: React.RefObject<HTMLDivElement>;\r\n}\r\n\r\nconst ToolbarLayout: React.FC<ToolbarLayoutProps> = ({ text }) => {\r\n  const { hideTitles, hideGroupNames } = useContext(TextEditorContext);\r\n\r\n  const saveSelection = () => {\r\n    const selection = window.getSelection();\r\n    const range = selection?.getRangeAt(0);\r\n    if (range) return range.cloneRange();\r\n    return document.createRange();\r\n  };\r\n\r\n  const restoreSelection = () => {\r\n    const selection = window.getSelection();\r\n    selection?.removeAllRanges();\r\n    selection?.addRange(savedSelection);\r\n  };\r\n\r\n  let savedSelection: Range = document.createRange();\r\n\r\n  const handleSpacing = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (savedSelection) restoreSelection();\r\n    const selection = window.getSelection();\r\n    let selectedElement = selection?.focusNode?.parentNode as HTMLElement;\r\n\r\n    while (selectedElement && selectedElement.localName !== \"div\") {\r\n      selectedElement = selectedElement.parentNode as HTMLElement;\r\n    }\r\n\r\n    const styles: string[] = [];\r\n\r\n    if (name === \"horizontalPadding\")\r\n      styles.push(\"paddingLeft\", \"paddingRight\");\r\n    if (name === \"verticalPadding\") styles.push(\"paddingTop\", \"paddingBottom\");\r\n    if (name === \"horizontalMargin\") styles.push(\"marginLeft\", \"marginRight\");\r\n    if (name === \"verticalMargin\") styles.push(\"marginTop\", \"marginBottom\");\r\n    styles.forEach((s) => (selectedElement.style[s] = `${value}px`));\r\n  };\r\n\r\n  const handleExportClick = () => {\r\n    const htmlContent = text.current?.innerHTML;\r\n    const newTab = window.open(\"\");\r\n    newTab?.document.write(htmlContent);\r\n    newTab?.document.close();\r\n  };\r\n\r\n  return (\r\n    <div className=\"tool-group\">\r\n      <div className=\"tool-group-icons\">\r\n        <Tooltip\r\n          toggle={\r\n            <button\r\n              className=\"btn btn-option btn-collapse\"\r\n              onClick={() => (savedSelection = saveSelection())}\r\n              title={hideTitles ? \"\" : \"Margin and padding\"}\r\n            >\r\n              <i className={`mdi mdi-move-resize`} />\r\n              <i className={`mdi mdi-chevron-down`} />\r\n            </button>\r\n          }\r\n          content={\r\n            <div className=\"text-editor-spacing\">\r\n              <div className=\"mr-3\">\r\n                <p>Padding</p>\r\n                <div className=\"spacing-input\">\r\n                  <i className=\"mdi mdi-arrow-expand-horizontal\" />\r\n                  {/* @ts-ignore */}\r\n                  <Input\r\n                    name=\"horizontalPadding\"\r\n                    type=\"number\"\r\n                    defaultValue={0}\r\n                    onBlur={handleSpacing}\r\n                  />\r\n                </div>\r\n                <div className=\"spacing-input\">\r\n                  <i className=\"mdi mdi-arrow-expand-vertical\" />\r\n                  {/* @ts-ignore */}\r\n                  <Input\r\n                    name=\"verticalPadding\"\r\n                    type=\"number\"\r\n                    defaultValue={0}\r\n                    onBlur={handleSpacing}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <p>Margin</p>\r\n                <div className=\"spacing-input\">\r\n                  <i className=\"mdi mdi-arrow-left-right\" />\r\n                  {/* @ts-ignore */}\r\n                  <Input\r\n                    name=\"horizontalMargin\"\r\n                    type=\"number\"\r\n                    defaultValue={0}\r\n                    onBlur={handleSpacing}\r\n                  />\r\n                </div>\r\n                <div className=\"spacing-input\">\r\n                  <i className=\"mdi mdi-arrow-up-down\" />\r\n                  {/* @ts-ignore */}\r\n                  <Input\r\n                    name=\"verticalMargin\"\r\n                    type=\"number\"\r\n                    defaultValue={0}\r\n                    onBlur={handleSpacing}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          }\r\n          closeOnLeave\r\n        />\r\n        <button className=\"btn btn-option\" onClick={handleExportClick} title={hideTitles ? \"\" : \"Preview in new tab\"}>\r\n          <i className={`mdi mdi-file-find`} />\r\n        </button>\r\n      </div>\r\n      {!hideGroupNames && <p className=\"tool-group-title\">Layout</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToolbarLayout;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport ToolbarText from \"./ToolbarText\";\r\nimport ToolbarColor from \"./ToolbarColor\";\r\nimport ToolbarImage from \"./ToolbarImage\";\r\nimport ToolbarLayout from \"./ToolbarLayout\";\r\nimport { TextEditorContext } from \"./TextEditorContext\";\r\n\r\ninterface ToolbarColorProps {\r\n  text: HTMLDivElement\r\n}\r\n\r\nconst TextEditorToolbar  = ({ text } : ToolbarColorProps) => {\r\n  const { options } = useContext(TextEditorContext);\r\n\r\n  const handleStyle = (style: string, value: string | undefined = undefined) =>\r\n    document.execCommand(style, false, value);\r\n\r\n  useEffect(() => {\r\n    const toolbar = document.querySelector(\".text-editor-toolbar\") as HTMLElement;\r\n    if (!toolbar) return;\r\n    if (toolbar.offsetWidth <= 761) {\r\n      toolbar.classList.add(\"text-editor-toolbar-wrap\");\r\n    } else {\r\n      toolbar.classList.remove(\"text-editor-toolbar-wrap\");\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"text-editor-toolbar\">\r\n      {options.some((o: string) => o === \"text\") && <ToolbarText handleStyle={handleStyle} />}\r\n      {options.some((o: string) => o === \"color\") && <ToolbarColor handleStyle={handleStyle} />}\r\n      {options.some((o: string) => o === \"image\") && <ToolbarImage text={text} />}\r\n      {options.some((o: string) => o === \"layout\") && <ToolbarLayout text={text} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextEditorToolbar;\r\n","import React, { useRef } from \"react\";\r\nimport TextEditorToolbar from \"./TextEditorToolbar\";\r\nimport { TextEditorContext } from \"./TextEditorContext\";\r\n\r\ninterface TextEditorProps {\r\n  initialValue?: string;\r\n  hideTitles?: boolean;\r\n  hideGroupNames?: boolean;\r\n  options?: string[];\r\n  vertical?: boolean;\r\n  textWidth?: string;\r\n  textHeight?: string;\r\n}\r\n\r\nexport default function TextEditor({\r\n  initialValue = \"\",\r\n  hideTitles = false,\r\n  hideGroupNames = false,\r\n  options = [\"text\", \"color\", \"image\", \"layout\"],\r\n  vertical = false,\r\n  textWidth = \"600px\",\r\n  textHeight = \"auto\"\r\n}: TextEditorProps) {\r\n  const text = useRef(null);\r\n\r\n  const handleImageClick = (e) => {\r\n    const clickedImage = e.target as HTMLImageElement;\r\n\r\n    if (text.current) {\r\n      text.current.querySelectorAll(\"img\").forEach((img) => {\r\n        img.classList.remove(\"selected-image\");\r\n      });\r\n      disableImageOptions(true);\r\n\r\n      if (clickedImage.tagName === \"IMG\") {\r\n        clickedImage.classList.add(\"selected-image\");\r\n        disableImageOptions(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const disableImageOptions = (disabled: boolean) => {\r\n    document.querySelectorAll(\".selected-image-option\").forEach((button) => {\r\n      (button as HTMLButtonElement).disabled = disabled;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <TextEditorContext.Provider\r\n      value={{ hideTitles, hideGroupNames, options, vertical }}\r\n    >\r\n      <div className={`text-editor${vertical ? \"-vertical\" : \"\"}`}>\r\n        {!vertical && <TextEditorToolbar text={text} />}\r\n\r\n        <div className=\"text-editor-document\">\r\n          <div\r\n            contentEditable\r\n            className=\"text-editor-content\"\r\n            style={{ width: textWidth, height: textHeight }}\r\n            ref={text}\r\n            dangerouslySetInnerHTML={{\r\n              __html: `<div style=\"width: ${textWidth}\">${initialValue || \"\"}</div>`,\r\n            }}\r\n            onClick={handleImageClick}\r\n          />\r\n        </div>\r\n\r\n        {vertical && <TextEditorToolbar text={text} />}\r\n      </div>\r\n    </TextEditorContext.Provider>\r\n  );\r\n}\r\n","import \"../../scss/app.scss\";\r\nimport React from \"react\";\r\n\r\ninterface WellRoundedUIProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport default function WellRoundedUI({ children }: WellRoundedUIProps) {\r\n  return (\r\n    <>\r\n      {children}\r\n      <div id=\"toasts-container\" />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\ninterface ModalBodyProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport default function ModalBody({ children }: ModalBodyProps) {\r\n  return <div className=\"modal-body\">{children}</div>;\r\n}\r\n","import React from \"react\";\r\nimport { StatusColor } from \"../../types/Colors\";\r\n\r\ninterface AlertMessageProps {\r\n  className?: string;\r\n  /**\r\n   * AlertMessage's content, mostly used for text\r\n   */\r\n  children: React.ReactNode;\r\n  color?: StatusColor;\r\n}\r\n\r\nexport default function AlertMessage({ className = \"\", children, color = StatusColor.Danger }: AlertMessageProps) {\r\n  return <div className={`alert-message alert-message-${color} ${className || \"\"}`}>{children}</div>;\r\n}\r\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","StatusColor","ThemeColor","Badge","className","children","color","jsx","Card","onClick","CardHeader","CardFooter","Col","xl","lg","md","sm","xs","Row","Spinner","size","sizeInPx","EmptyLinePlaceholder","style","text","action","jsxs","PropTypes","Progress","value","min","max","TabPane","name","disabled","Tabs","tabHeader","setTabHeader","useState","childContent","setChildContent","active","setActive","useEffect","headers","childCnt","React","element","changeTab","key","TreeViewItem","setSelection","selection","id","level","endOfTree","editItem","deleteItem","fonSizes","backgroundColors","Button","submit","animate","isSubmitting","styles","classNames","icon","Fragment","Input","label","placeholder","register","type","errors","required","minLength","maxLength","props","input","textarea","field","MultiSelect","options","onChange","isListOpen","openList","resizeObserver","entries","rect","height","select","nameSelection","applyChanges","changes","addItem","s","target","_a","option","Pagination","itemsPerPage","totalItems","activePage","numberOfPages","_","index","i","Select","defaultOption","defaultValue","returnSelectInput","NoDataPlaceholder","button","Table","keyColumn","columns","data","layout","actions","keys","column","row","item","Calendar","year","month","showWeekends","onDayClick","onDataClick","responsiveWeekDays","daysInWeek","weekDays","currentMonth","setCurrentMonth","currentYear","setCurrentYear","getMonthName","date","calendar","firstDayOfMonth","lastDayOfMonth","daysInMonth","startDayOfWeek","endDayOfWeek","daysInPreviousMonth","daysInNextMonth","totalDays","monthTable","currentDay","week","dayOfWeek","handleMonthChange","increment","newDate","dateObject","day","sameDate","d1","d2","dayClassNames","i2","Dropdown","toggle","openOnHover","closeOnLeave","width","isOpen","setIsOpen","hoverTimeout","Tooltip","content","FileUpload","allowedExtensions","multiple","dragAndDrop","showAllowedExtensions","isDragOver","setIsDragOver","files","setFiles","fileInputRef","useRef","handleDragEnter","handleDragLeave","handleDrop","handleFiles","promises","file","fileExtension","resolve","reader","base64Data","filesWithBase64","displayAllowedExtensions","ext","ImageUpload","fileIndex","TextEditorContext","createContext","settings","fontSizeOptions","fontOptions","ToolbarText","handleStyle","hideTitles","hideGroupNames","useContext","title","capitalizeFirstLetter","overrideFontFaces","fontElement","fontFaceValue","ToolbarIconGroup","ToolbarColor","fontColor","setFontColor","highlightColor","setHighlightColor","fillColor","setFillColor","v","ToolbarImage","imageInputRef","handleAlignment","float","selectedImage","event","imageUrl","_b","img","e2","resizeImage","e3","newWidth","originalWidth","startX","newHeight","originalHeight","startY","ToolbarLayout","saveSelection","range","restoreSelection","savedSelection","handleSpacing","selectedElement","htmlContent","newTab","TextEditorToolbar","toolbar","o","TextEditor","initialValue","vertical","textWidth","textHeight","handleImageClick","clickedImage","disableImageOptions","WellRoundedUI","ModalBody","AlertMessage"],"mappings":"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","x_google_ignoreList":[0,1]}